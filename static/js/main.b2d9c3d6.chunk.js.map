{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/router.js","registerServiceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","className","type","name","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","img_url","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","App","_callee","e","recipeName","API","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","_this","setState","stop","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","stringify","setItem","components_Form","this","components_Recipes","Component","Recipe","activeRecipe","req","res","location","href","publisher_url","React","Router","react_router","path","component","exact","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","router","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b2d9c3d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => (\r\n    <form onSubmit={props.getRecipe} style={{marginBottom: '2rem'}}>\r\n        <input className='form__input' type='text' name='recipeName'></input>\r\n        <button className='form__button'>Search</button>\r\n    </form>\r\n);\r\n\r\nexport default Form;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Recipes = props => {\r\n    return (\r\n        <div className='container'>\r\n            <div className='row'>\r\n                {props.recipes.map((recipe) => {\r\n                    return (\r\n                        <div key={recipe.recipe_id} className='col-md-4' style={{marginBottom: '2rem'}}>\r\n                            <div className='recipes__box'>\r\n                                <img className='recipe__box-img' \r\n                                    src={recipe.image_url} \r\n                                    alt={recipe.img_url}>\r\n                                </img>\r\n                                <div className='recipe__text'>\r\n                                    <h5 className='recipes__title'>\r\n                                        {recipe.title.length < 20 ? `${recipe.title}` : `${recipe.title.substring(0, 25)}...`}\r\n                                    </h5>\r\n                                    <p className='recipes__subtitle'>Publisher: <span>{recipe.publisher}</span></p>\r\n                                </div>\r\n                                <button className='recipe_buttons'>\r\n                                    <Link to={{\r\n                                        pathname: `/recipe/${recipe.recipe_id}`,\r\n                                        state: {recipe: recipe.title}\r\n                                        }}>View Recipe</Link>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipes;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Form from './components/Form';\r\nimport Recipes from './components/Recipes';\r\n\r\nconst key = 'e06bca86484f04cca8f2f433e02eeb73'; \r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    recipes: []\r\n  }\r\n\r\n  getRecipe = async (e) => {\r\n    const recipeName = e.target.elements.recipeName.value;\r\n    e.preventDefault();\r\n    const API = await fetch(`https://www.food2fork.com/api/search?key=${key}&q=${recipeName}&page=2`);\r\n    const data = await API.json();\r\n    \r\n    this.setState({\r\n      recipes: data.recipes\r\n    });\r\n  }\r\n  componentDidMount = () => {\r\n    const json = localStorage.getItem('recipes');\r\n    const recipes = JSON.parse(json);\r\n    this.setState({\r\n      recipes\r\n    })\r\n  }\r\n  \r\n\r\n  componentDidUpdate = () => {\r\n    const recipes = JSON.stringify(this.state.recipes);\r\n    localStorage.setItem('recipes', recipes);\r\n  }\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"App-title\">Recipe Search</h1>\r\n        </header>\r\n        <Form getRecipe={this.getRecipe}/>\r\n        <Recipes recipes={this.state.recipes}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nconst key = 'e06bca86484f04cca8f2f433e02eeb73'; \r\n\r\nclass Recipe extends React.Component {\r\n\r\n    state = {\r\n        activeRecipe: []\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        const title = this.props.location.state.recipe;\r\n        const req = await fetch(`https://www.food2fork.com/api/search?key=${key}&q=${title}`);\r\n        const res = await req.json();\r\n        \r\n        this.setState({activeRecipe: res.recipes[0]});\r\n    }\r\n\r\n    render() {\r\n        const recipe = this.state.activeRecipe;\r\n        return (\r\n            <div className='container'>\r\n                {this.state.activeRecipe.length !== 0 &&\r\n                    <div className='active-recipe'>\r\n                        <img  className='active-recipe__img' src={recipe.image_url} alt={recipe.title}/>\r\n                        <h3 className='active-recipe__title'>{recipe.title}</h3>\r\n                        <h4 className='active-recipe__publisher'>Publisher: <span>{recipe.publisher}</span></h4>\r\n                        <p className='active-recipe__website'>Website: <span><a href={recipe.publisher_url}>{recipe.publisher_url}</a></span></p>\r\n                        <button className='active-recipe__button'>\r\n                            <Link to='/'>Go Home</Link>\r\n                        </button>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport {BrowserRouter, Switch, Route} from 'react-router-dom';\r\n\r\nimport App from '../App';\r\nimport Recipe from './Recipe';\r\n\r\nconst Router = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path='/' component={App} exact/>\r\n            <Route path='/recipe/:id' component={Recipe}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Router;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n        )\r\n    );\r\n    \r\n    export default function register() {\r\n        if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n    \r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n    \r\n            if (isLocalhost) {\r\n            // This is running on localhost. Lets check if a service worker still exists or not.\r\n            checkValidServiceWorker(swUrl);\r\n    \r\n            // Add some additional logging to localhost, pointing developers to the\r\n            // service worker/PWA documentation.\r\n            navigator.serviceWorker.ready.then(() => {\r\n                console.log(\r\n                'This web app is being served cache-first by a service ' +\r\n                    'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                );\r\n            });\r\n            } else {\r\n            // Is not local host. Just register service worker\r\n            registerValidSW(swUrl);\r\n            }\r\n        });\r\n        }\r\n    }\r\n    \r\n    function registerValidSW(swUrl) {\r\n        navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n            const installingWorker = registration.installing;\r\n            installingWorker.onstatechange = () => {\r\n                if (installingWorker.state === 'installed') {\r\n                if (navigator.serviceWorker.controller) {\r\n                    // At this point, the old content will have been purged and\r\n                    // the fresh content will have been added to the cache.\r\n                    // It's the perfect time to display a \"New content is\r\n                    // available; please refresh.\" message in your web app.\r\n                    console.log('New content is available; please refresh.');\r\n                } else {\r\n                    // At this point, everything has been precached.\r\n                    // It's the perfect time to display a\r\n                    // \"Content is cached for offline use.\" message.\r\n                    console.log('Content is cached for offline use.');\r\n                }\r\n                }\r\n            };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n    }\r\n    \r\n    function checkValidServiceWorker(swUrl) {\r\n        // Check if the service worker can be found. If it can't reload the page.\r\n        fetch(swUrl)\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n            response.status === 404 ||\r\n            response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n            // No service worker found. Probably a different app. Reload the page.\r\n            navigator.serviceWorker.ready.then(registration => {\r\n                registration.unregister().then(() => {\r\n                window.location.reload();\r\n                });\r\n            });\r\n            } else {\r\n            // Service worker found. Proceed as normal.\r\n            registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n            'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n    }\r\n    \r\n    export function unregister() {\r\n        if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n        }\r\n    }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Router from './components/router';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<Router />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}